from veros.variables import Variable


grid = ('xt','yt')

VARIABLES = dict(
    # sea ice
    hIceMean        = Variable("Mean ice thickness", grid, "m"),
    hSnowMean       = Variable("Mean snow thickness", grid, "m"),
    Area            = Variable("Sea ice cover fraction", grid, " "),
    TIceSnow        = Variable("Ice/ snow temperature", ("xt","yt","zt"), "K"),
    SeaIceMassC     = Variable("Sea ice mass centered around c point", grid, "kg"),
    SeaIceMassU     = Variable("Sea ice mass centered around u point", grid, "kg"),
    SeaIceMassV     = Variable("Sea ice mass centered around v point", grid, "kg"),
    SeaIceStrength  = Variable("Ice Strength", grid, "N/m"),
    zeta            = Variable("Bulk ice viscosity", grid, "Ns/m^2"),
    eta             = Variable("Shear ice viscosity", grid, "Ns/m^2"),
    os_hIceMean     = Variable("Overshoot of ice thickness from advection", grid, "m"),
    os_hSnowMean    = Variable("Overshoot of snow thickness from advection", grid, "m/s"),
    AreaW           = Variable("Sea ice cover fraction centered around u point", grid, " "),
    AreaS           = Variable("Sea ice cover fraction centered around v point", grid, " "),
    sigma11         = Variable("Stress tensor element", grid, "N/m^2"),
    sigma22         = Variable("Stress tensor element", grid, "N/m^2"),
    sigma12         = Variable("Stress tensor element", grid, "N/m^2"),
    uIce            = Variable("Zonal ice velocity", grid, "m/s"),
    vIce            = Variable("Merdidional ice velocity", grid, "m/s"),
    WindForcingX    = Variable("Zonal forcing on ice by wind stress", grid, "N"),
    WindForcingY    = Variable("Meridional forcing on ice by wind stress", grid, "N"),
    tauX            = Variable("Zonal surface stress", grid, "N/m^2"),
    tauY            = Variable("Meridional surface stress", grid, "N/m^2"),
    recip_hIceMean  = Variable("1 / hIceMean", grid, "1/m"),
    SeaIceLoad      = Variable("Load of sea ice on ocean surface", grid, "kg/m^2"),
    # ocean
    uOcean          = Variable("Zonal ocean surface velocity", grid, "m/s"),
    vOcean          = Variable("Merdional ocean surface velocity", grid, "m/s"),
    theta           = Variable("Ocean surface temperature", grid, "K"),
    ocSalt          = Variable("Ocean surface salinity", grid, "g/kg"),
    Qnet            = Variable("Net heat flux out of the ocean", grid, "W/m^2"),
    fu              = Variable("Zonal stress on ocean surface", grid, "N/m^2"),
    fv              = Variable("Meridional stress on ocean surface", grid, "N/m^2"),
    saltflux        = Variable("Salt flux into the ocean", grid, "m/s"),
    R_low           = Variable("Sea floor depth (<0)", grid, "m"),
    ssh_an          = Variable("Sea surface height anomaly", grid, "m"),
    # atmosphere
    Qsw             = Variable("Surface shortwave heatflux (+ = upwards)", grid, "W/m^2"),
    uWind           = Variable("Zonal wind velocity", grid, "m/s"),
    vWind           = Variable("Merdional wind velocity", grid, "m/s"),
    wSpeed          = Variable("Total wind speed", grid, "m/s"),
    surfPress       = Variable("Surface pressure", grid, "P"),
    SWDown          = Variable("Downward shortwave radiation", grid, "W/m^2"),
    LWDown          = Variable("Downward longwave radiation", grid, "W/m^2"),
    ATemp           = Variable("Atmospheric temperature", grid, "K"),
    aqh             = Variable("Atmospheric specific humidity", grid, "g/kg"),
    precip          = Variable("Precipitation rate", grid, "m/s"),
    snowfall        = Variable("Snowfall rate", grid, "m/s"),
    evap            = Variable("Evaporation rate over open ocean", grid, "m/s"),
    runoff          = Variable("Runoff into ocean", grid, "m/s"),
    EmPmR           = Variable("Evaporation minus precipitation minus runoff", grid, "m/s"),
    # masks
    maskInC         = Variable("Mask at c-points, 0 on open boundaries", grid, " "),
    maskInU         = Variable("Mask at u-points, 0 on open boundaries", grid, " "),
    maskInV         = Variable("Mask at v-points, 0 on open boundaries", grid, " "),
    iceMask         = Variable("Mask at c-points", grid, " "),
    iceMaskU        = Variable("Mask at u-points", grid, " "),
    iceMaskV        = Variable("Mask at v-points", grid, " "),
    k1AtC           = Variable(" ", grid, " "),
    k2AtC           = Variable(" ", grid, " "),
    k1AtZ           = Variable(" ", grid, " "),
    k2AtZ           = Variable(" ", grid, " "),
    # grid
    fCori           = Variable("Coriolis parameter", grid, "1/s"),
    dxC             = Variable("Zonal spacing of cell centers across western cell wall", grid, "[m]"),
    dyC             = Variable("Meridional spacing of cell centers across southern cell wall", grid, "[m]"),
    dxG             = Variable("Zonal spacing of cell faces along southern cell wall", grid, "[m]"),
    dyG             = Variable("Meridional spacing of cell faces along western cell wall", grid, "[m]"),
    dxU             = Variable("Zonal spacing of u-points through cell center", grid, "[m]"),
    dyU             = Variable("Meridional spacing of u-points through south-west corner of the cel", grid, "[m]"),
    dxV             = Variable("Zonal spacing of v-points through south-west corner of the cell", grid, "[m]"),
    dyV             = Variable("Meridional spacing of v-points through cell center", grid, "[m]"),
    recip_dxC       = Variable("1 / dxC", grid, "[1/m]"),
    recip_dyC       = Variable("1 / dyC", grid, "[1/m]"),
    recip_dxG       = Variable("1 / dxG", grid, "[1/m]"),
    recip_dyG       = Variable("1 / dyG", grid, "[1/m]"),
    recip_dxU       = Variable("1 / dxU", grid, "[1/m]"),
    recip_dyU       = Variable("1 / dyU", grid, "[1/m]"),
    recip_dxV       = Variable("1 / dxV", grid, "[1/m]"),
    recip_dyV       = Variable("1 / dyV", grid, "[1/m]"),
    rA              = Variable("Grid cell area centered around c-point", grid, "[m^2]"),
    rAu             = Variable("Grid cell area centered around u-point", grid, "[m^2]"),
    rAv             = Variable("Grid cell area centered around v-point", grid, "[m^2]"),
    rAz             = Variable("Grid cell area centered around z-point", grid, "[m^2]"),
    recip_rA        = Variable("1 / rA", grid, ["1/m^2"]),
    recip_rAu       = Variable("1 / rAu", grid, ["1/m^2"]),
    recip_rAv       = Variable("1 / rAv", grid, ["1/m^2"]),
    recip_rAz       = Variable("1 / rAz", grid, ["1/m^2"]),
    # for debugging #TODO remove this
    F_lh            = Variable("Latent heat flux at the ice surface (sublimation)", grid, "[W/m^2]"),
    F_lwu           = Variable("Longwave ice surface heat flux", grid, "[W/m^2]"),
    F_sens          = Variable("Sensible ice surface heat flux", grid, "[W/m^2]"),
    q_s             = Variable("Specific humidity of the air at the ice surface", grid, "[kg/kg]"),
    F_ia_net        = Variable("Net heat flux divergence at the ice surface", grid, "[W/m^2"),
    F_io_net        = Variable("Net upward conductive flux through the ice", grid, "[W/m^2]"),
    F_oi            = Variable("Heat flux from the ocean to the ice", grid, "[W/m^2]"),
    IceGrowthRateMixedLayer = Variable("", grid, ""),
    dhIceMean_dt = Variable("",grid,""),
    dArea_dt        = Variable("",grid,""),
    dArea_oiFlux= Variable("",grid,""),
    dArea_iaFlux= Variable("",grid,""),
    dArea_oaFlux= Variable("",grid,""),
    NetExistingIceGrowthRate= Variable("",grid,""),
    IceGrowthRateOpenWater= Variable("",grid,"")
)